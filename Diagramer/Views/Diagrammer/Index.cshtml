@using System.Web
@model Diagram;
@{
	Layout = null;
    ViewData["Title"] = "Diagrammer";
	var xml = @Model.XML;
}

<!DOCTYPE html>
<html>
<head>
    <title>Grapheditor</title>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <link rel="stylesheet" type="text/css" href="javascript/examples/grapheditor/www/styles/grapheditor.css">
	<script type="text/javascript">
		// Parses URL parameters. Supported parameters are:
		// - lang=xy: Specifies the language of the user interface.
		// - touch=1: Enables a touch-style user interface.
		// - storage=local: Enables HTML5 local storage.
		// - chrome=0: Chromeless mode.
		var urlParams = (function(url)
		{
			var result = new Object();
			var idx = url.lastIndexOf('?');
	
			if (idx > 0)
			{
				var params = url.substring(idx + 1).split('&');
				
				for (var i = 0; i < params.length; i++)
				{
					idx = params[i].indexOf('=');
					
					if (idx > 0)
					{
						result[params[i].substring(0, idx)] = params[i].substring(idx + 1);
					}
				}
			}
			
			return result;
		})(window.location.href);
	
		// Default resources are included in grapheditor resources
		mxLoadResources = true;
	</script>
	<!-- В данном файле настроки endpoints, размеров рабочей области -->
	<script type="text/javascript" src="javascript/examples/grapheditor/www/js/Init.js"></script>
	<!-- zlib port to javascript - fast, modularized, with browser support -->
	<script type="text/javascript" src="javascript/examples/grapheditor/www/deflate/pako.min.js"></script>
	<!-- Либа для енкода/декода -->
	<script type="text/javascript" src="javascript/examples/grapheditor/www/deflate/base64.js"></script>
	<!-- либа без которой нельзя использовать функции покраски элементов диаграммы -->
	<script type="text/javascript" src="javascript/examples/grapheditor/www/jscolor/jscolor.js"></script>
	<!-- без этой либы проект не работает -->
	<script type="text/javascript" src="javascript/examples/grapheditor/www/sanitizer/sanitizer.min.js"></script>
	<!-- определяет с какого клиента зашел пользователь, например с гугла, эксплорера, мака, андроида итд -->
	<script type="text/javascript" src="javascript/src/js/mxClient.js"></script>
	<!-- Бинды кнопок, взаимодействие с элементами диаграммера  -->
	<script type="text/javascript" src="javascript/examples/grapheditor/www/js/EditorUi.js"></script>
	<script type="text/javascript" src="javascript/examples/grapheditor/www/js/Editor.js"></script>
	<script type="text/javascript" src="javascript/examples/grapheditor/www/js/Sidebar.js"></script>
	<script type="text/javascript" src="javascript/examples/grapheditor/www/js/Graph.js"></script>
	<script type="text/javascript" src="javascript/examples/grapheditor/www/js/Format.js"></script>
	<script type="text/javascript" src="javascript/examples/grapheditor/www/js/Shapes.js"></script>
	<script type="text/javascript" src="javascript/examples/grapheditor/www/js/Actions.js"></script>
	<script type="text/javascript" src="javascript/examples/grapheditor/www/js/Menus.js"></script>
	<script type="text/javascript" src="javascript/examples/grapheditor/www/js/Toolbar.js"></script>
	<script type="text/javascript" src="javascript/examples/grapheditor/www/js/Dialogs.js"></script>
	 <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>
	<script src="https://cdn.socket.io/socket.io-3.0.0.js"></script>
</head>
<body class="geEditor">
<script type="text/javascript">
		// Extends EditorUi to update I/O action states based on availability of backend
		(function()
		{
			var editorUiInit = EditorUi.prototype.init;

			EditorUi.prototype.init = function()
			{
				editorUiInit.apply(this, arguments);
				this.actions.get('export').setEnabled(false);

				// Updates action states which require a backend
				if (!Editor.useLocalStorage)
				{
					
					var enabled = true;
					this.actions.get('open').setEnabled(enabled || Graph.fileSupport);
					this.actions.get('import').setEnabled(enabled || Graph.fileSupport);
					this.actions.get('save').setEnabled(enabled);
					this.actions.get('saveAs').setEnabled(enabled);
					this.actions.get('export').setEnabled(enabled);
					
				}
			};
			
			// Adds required resources (disables loading of fallback properties, this can only
			// be used if we know that all keys are defined in the language specific file)
			mxResources.loadDefaultBundle = false;
			var bundle = mxResources.getDefaultBundle(RESOURCE_BASE, mxLanguage) ||
				mxResources.getSpecialBundle(RESOURCE_BASE, mxLanguage);

			// Fixes possible asynchronous requests
			mxUtils.getAll([bundle, STYLE_PATH + '/default.xml'], function(xhr)
			{
				var xml = "@Html.Raw(HttpUtility.JavaScriptStringEncode(@Model.XML))";
				window.DIAGRAM_ID = "@Html.Raw(HttpUtility.JavaScriptStringEncode(@Model.Id.ToString()))";
				console.log(xml);
				
				// Adds bundle text to resources
				mxResources.parse(xhr[0].getText());
				
				// Configures the default graph theme
				var themes = new Object();
				themes[Graph.prototype.defaultThemeName] = xhr[1].getDocumentElement(); 
				
				// Main
				let doc = mxUtils.parseXml(xml);
				//console.log(doc.body.getElementsByTagName('parsererror')[0]);
				editor = new Editor(urlParams['chrome'] == '0', themes);
				editor.setFilename("test");
				editor.setGraphXml(doc.documentElement);
				editorUI = new EditorUi(editor);
				editor.graph.refresh();
				console.log(editor.graph);
				var groupTask = @ViewBag.IsGroupTask.ToString().ToLower();
				if (groupTask){
					var connection = new signalR.HubConnectionBuilder().withUrl("/diagrammerHub").build();
					connection.on("ReceiveMessage", function (message) {
						console.log(message);
					});
					connection.start().then(() => {
				  console.log("Connected");
				  connection.invoke("JoinRoom", "@Html.Raw(HttpUtility.JavaScriptStringEncode(@ViewBag.TaskId))","@Html.Raw(HttpUtility.JavaScriptStringEncode(@ViewBag.GroupId))").then(() => {
				  console.log("Joined group");
				  });
					}).catch(err => console.error(err));
					function sendMessage() {
						var message = $('#message').val();
						connection.invoke("SendMessage", message);
						console.log(message);
					}
				}
				
				// const socket = io('ws://localhost:8080');
				// socket.on('connection', xml_server => {
				// 	let doc = mxUtils.parseXml(xml_server);
				// 	editor.setGraphXml(doc.documentElement);
				// 	editor.graph.updateSocket(socket);
				// 	editor.graph.refresh();
				// });
				// socket.on('update_graph', xml => {
				// 	// console.log("NEW XML: ")
				// 	// console.log(xml);
				// 	let doc = mxUtils.parseXml(xml);
				// 	editor.setGraphXml(doc.documentElement);
				// 	editor.graph.refresh();
				// });
			}, function()
			{
				document.body.innerHTML = '<center style="margin-top:10%;">Error loading resource files. Please check browser console.</center>';
			});
		})();
	</script>

</body>
</html>